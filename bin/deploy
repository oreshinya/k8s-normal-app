#!/usr/bin/env bash

set -e

# Set env
source ./k8s/env/$1.sh

# Deploy
envsubst < ./k8s/config/namespace.yml | kubectl apply -f -

if [[ -f ./k8s/config/secret-env/$1.yml.enc ]]; then
  sekret dec ./k8s/config/secret-env/$1.yml.enc | envsubst | kubectl apply -f -
fi

sekret dec ./k8s/config/secret-cloudflare.yml.enc | envsubst | kubectl apply -f -

sekret dec ./k8s/config/secret-account.yml.enc | envsubst | kubectl apply -f -

envsubst < ./k8s/config/configmap/$1.yml | kubectl apply -f -

envsubst < ./k8s/config/issuer.yml | kubectl apply -f -

envsubst < ./k8s/config/certificate.yml | kubectl apply -f -

envsubst < ./k8s/config/console.yml | kubectl apply -f -



next_pvc=$(kubectl get pvc $SERVICE-pvc-assets-$DEPLOY_REV -n $NAMESPACE --no-headers | wc -l)

if [[ $next_pvc = 1 ]]; then
  echo "PVC exists already ;)"
else
  envsubst < ./k8s/config/pvc-assets.yml | kubectl apply -f -
fi

envsubst < ./k8s/config/job-assets.yml | kubectl apply -f -

for i in {1..361}; do # max 30 minutes
  if [[ "$(kubectl get job $SERVICE-job-assets-$DEPLOY_REV -n $NAMESPACE --output=jsonpath='{.status.succeeded}')" = "1" ]]; then
    break
  elif [[ "$(kubectl get job $SERVICE-job-assets-$DEPLOY_REV -n $NAMESPACE --output=jsonpath='{.status.failed}')" = "1" ]]; then
    echo "Job assets is failed."
    exit 1
  elif [ "$i" = "361" ]; then
    echo "Job assets is too long."
    exit 1
  else
    sleep 5
  fi
done

# Wait unmounting pv
for i in {1..361}; do # max 30 minutes
  if [[ "$(kubectl get pod -n $NAMESPACE | grep $SERVICE-job-assets-$DEPLOY_REV | grep -s -c Completed)" = "1" ]]; then
    envsubst < ./k8s/config/job-assets.yml | kubectl delete -f -
    break
  elif [ "$i" = "361" ]; then
    echo "Job assets is too long."
    exit 1
  else
    sleep 5
  fi
done



for i in {1..361}; do # max 30 minutes
  completed=$(kubectl get pods $SERVICE-console -n $NAMESPACE | grep -s -c "Running") || true
  if [ "$completed" = "1" ]; then
    kubectl exec $SERVICE-console -n $NAMESPACE -c console -- oreshinya migrate production
    break
  elif [ "$i" = "361" ]; then
    echo "Migration is too long."
    exit 1
  else
    sleep 5
  fi
done



envsubst < ./k8s/config/deployment.yml | kubectl apply -f -

envsubst < ./k8s/config/hpa.yml | kubectl apply -f -

envsubst < ./k8s/config/service.yml | kubectl apply -f -

envsubst < ./k8s/config/ingress.yml | kubectl apply -f -



while [[ $(kubectl get pvc -n ${NAMESPACE} --no-headers | grep pvc-assets | wc -l) -gt 5 ]]; do
  delete_pvc=$( \
    kubectl get pvc \
    -n $NAMESPACE \
    --no-headers \
    --sort-by=.metadata.creationTimestamp \
    -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' \
    | grep pvc-assets | head -n 1)
  kubectl delete pvc $delete_pvc -n $NAMESPACE
done
